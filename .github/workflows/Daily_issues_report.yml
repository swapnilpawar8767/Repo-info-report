name: Weekly GitHub Repo Report

on:
  schedule:
    - cron: "30 2 * * 1"  # Every Monday at 08:00 IST (2:30 AM UTC)
  workflow_dispatch:

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests pytz weasyprint markdown PyGithub

      - name: Generate and send report
        env:
          GHPT_PAT: ${{ secrets.DILESH_PAT_TOKEN }}
          WEEKLY_ISSUE_REPORT: ${{ vars.WEEKLY_ISSUE_REPORT }}
        run: |
          python << 'EOF'
          import requests, os, datetime, pytz, markdown
          from weasyprint import HTML
          from github import Github

          repos = [
              "swapnilpawar8767/Repo-info-report/"
          ]

          token = os.environ.get("GHPT_PAT")
          if not token:
              print("❌ No token found in GHPT_PAT. Exiting.")
              exit(1)

          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3+json"
          }

          IST = pytz.timezone('Asia/Kolkata')
          report_date = datetime.date.today()
          separator = "──────────────────────────────\n"
          seven_days_ago = datetime.datetime.now(IST) - datetime.timedelta(days=7)
          seven_days_ago_iso = seven_days_ago.isoformat()

          message_parts = []
          message_parts.append(f"📊 Weekly GitHub Repo Report - {report_date}\n\n")
          message_parts.append(f"Showing issues updated in the last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n\n")

          for repo in repos:
              repo_header = f"\n{separator}\n\n{' ' * 15}**{repo.upper()}**\n\n{separator}\n"
              message_parts.append(repo_header)

              url = f"https://api.github.com/repos/{repo}/issues?state=all&since={seven_days_ago_iso}&per_page=100&sort=updated"
              try:
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  issues = response.json()
              except Exception as e:
                  message_parts.append(f"Failed to fetch issues for {repo}: {e}\n{separator}\n")
                  continue

              has_recent_issues = False
              open_count = 0
              closed_count = 0

              for issue in issues:
                  if "pull_request" in issue:
                      continue

                  updated_at_raw = issue.get("updated_at")
                  if not updated_at_raw:
                      continue
                  try:
                      dt_utc = datetime.datetime.strptime(updated_at_raw, "%Y-%m-%dT%H:%M:%SZ")
                      dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
                      dt_ist = dt_utc.astimezone(IST)
                  except:
                      continue

                  if dt_ist < seven_days_ago:
                      continue

                  has_recent_issues = True
                  title = issue.get("title", "")
                  issue_number = issue.get("number", "")
                  issue_url = issue.get("html_url", "")
                  status = "🆕 Open" if issue.get("state", "").lower() == "open" else "Closed"

                  if status == "🆕 Open":
                      open_count += 1
                  else:
                      closed_count += 1

                  updated_at = dt_ist.strftime("%Y-%m-%d %H:%M:%S")

                  message_parts.append(
                      f"📌 **#{issue_number}** [{title}]({issue_url})  \n"
                      f"**Status**: {status} | **Updated**: {updated_at}  \n"
                      f"{separator}  \n"
                  )

              if not has_recent_issues:
                  message_parts.append(f"No issues updated in the last 7 days\n{separator}\n")

              message_parts.append(
                  f"📊 **Summary (last 7 days)**  \n"
                  f"Open Issues   :: {open_count}  \n"
                  f"Closed Issues :: {closed_count}  \n"
                  f"{separator}  \n"
              )

          final_message = "".join(message_parts)
          with open('weekly_report.md', 'w', encoding='utf-8') as f:
              f.write(final_message)

          html_content = markdown.markdown(final_message)
          styled_html = f"<html><body>{html_content}</body></html>"

          HTML(string=styled_html).write_pdf('weekly_report.pdf')

          # Always upload to GitHub Release
          g = Github(token)
          repo_obj = g.get_repo(repos[0])  # first repo in list
          release_tag = f"weekly-report-{report_date}"
          release_name = f"Weekly Report - {report_date}"
          release_body = f"Weekly GitHub Repo Report for {report_date}"

          try:
              existing_release = repo_obj.get_release(release_tag)
              existing_release.delete_release()
              repo_obj.get_git_ref(f"tags/{release_tag}").delete()
          except:
              pass

          release = repo_obj.create_git_release(
              tag=release_tag,
              name=release_name,
              message=release_body,
              draft=False,
              prerelease=False
          )

          release.upload_asset(
              path='weekly_report.pdf',
              name='weekly_report.pdf',
              label='Weekly Report PDF',
              content_type='application/pdf'
          )

          download_url = f"https://github.com/{repos[0]}/releases/download/{release_tag}/weekly_report.pdf"

          # Send Teams message
          webhook_url = os.environ.get("WEEKLY_ISSUE_REPORT")
          payload = {
              "text": f"📊 Weekly GitHub Repo Report - {report_date}\n\n"
                      f"📅 Period: Last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})  \n"
                      f"📊 Repositories: {len(repos)} repositories monitored  \n"
                      f"📥 [Download PDF Report]({download_url})"
          }
          requests.post(webhook_url, json=payload, headers={"Content-Type": "application/json"})
          EOF

      - name: Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weekly-report-${{ github.run_id }}
          path: |
            weekly_report.md
            weekly_report.pdf
          retention-days: 7
