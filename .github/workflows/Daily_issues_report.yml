name: Weekly Issues Report for ZySec-AI Repos

on:
  schedule:
    - cron: "30 2 * * 1"  # Every Monday at 08:00 IST (2:30 AM UTC)
  workflow_dispatch:

permissions:
  issues: read
  contents: read

jobs:
  generate-issues-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python dependencies
        run: pip install requests pytz

      - name: Generate Weekly Issues Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import os
          import requests
          import datetime
          import pytz

          IST = pytz.timezone('Asia/Kolkata')
          today = datetime.datetime.now(IST)
          seven_days_ago = today - datetime.timedelta(days=7)
          seven_days_ago_iso = seven_days_ago.isoformat()

          repos = [
              "swapnilpawar8767/Repo-info-report",
              "swapnilpawar8767/env-test",
              "swapnilpawar8767/oc-project"
          ]

          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }

          separator = "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"
          report_date = today.strftime("%Y-%m-%d")
          message_parts = [f"ðŸ“Š Weekly GitHub Issues Report - {report_date}\n"]
          message_parts.append(f"Showing issues updated in the last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n")

          for repo in repos:
              repo_header = f"\n{separator}\n**{repo.upper()}**\n{separator}\n"
              message_parts.append(repo_header)

              url = f"https://api.github.com/repos/{repo}/issues?state=all&since={seven_days_ago_iso}&per_page=100&sort=updated"
              try:
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  issues = response.json()
              except requests.exceptions.HTTPError as e:
                  message_parts.append(f"Failed to fetch issues for {repo}: {e}\n")
                  continue

              recent_issues_found = False
              for issue in issues:
                  if "pull_request" in issue:
                      continue  # skip PRs

                  updated_at = issue.get("updated_at")
                  if not updated_at:
                      continue

                  dt_utc = datetime.datetime.strptime(updated_at, "%Y-%m-%dT%H:%M:%SZ")
                  dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
                  dt_ist = dt_utc.astimezone(IST)

                  if dt_ist < seven_days_ago:
                      continue

                  recent_issues_found = True
                  title = issue.get("title", "")
                  url = issue.get("html_url", "")
                  status = "ðŸ†• Open" if issue.get("state") == "open" else "Closed"

                  message_parts.append(
                      f"- [#{issue['number']}]({url}) {title} | Status: {status} | Updated: {dt_ist.strftime('%Y-%m-%d %H:%M')}\n"
                  )

              if not recent_issues_found:
                  message_parts.append("No issues updated in the last 7 days.\n")

          final_message = "\n".join(message_parts)

          with open("weekly_issues_report.md", "w") as f:
              f.write(final_message)
          EOF

      - name: Post Report to Teams
        if: vars.REPORT_WEBHOOK_URL != ''
        env:
          WEBHOOK_URL: ${{ vars.REPORT_WEBHOOK_URL }}
        run: |
          python3 <<'EOF'
          import os
          import requests

          webhook_url = os.environ['WEBHOOK_URL']

          with open("weekly_issues_report.md", "r") as f:
              report = f.read()

          payload = {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "0076D7",
              "summary": "Weekly GitHub Issues Report",
              "sections": [{"activityTitle": "ðŸ“Š Weekly GitHub Issues Report", "text": report.replace('\n', '  \n')}]
          }

          response = requests.post(webhook_url, json=payload, headers={"Content-Type": "application/json"})
          if response.status_code != 200:
              print(f"Failed to post to webhook: {response.status_code} {response.text}")
              exit(1)
          print("âœ… Report sent to Teams successfully!")
          EOF

      - name: Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-issues-report-${{ github.run_id }}
          path: weekly_issues_report.md
          retention-days: 7
