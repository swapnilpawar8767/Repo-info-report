name: Weekly GitHub Repo Report

on:
  schedule:
    - cron: "30 2 * * 1"  # Every Monday at 08:00 IST (2:30 AM UTC)
  workflow_dispatch:

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests pytz

      - name: Generate and send report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPORT_WEBHOOK_URL: ${{ secrets.REPORT_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import requests
          import os
          import datetime
          import pytz
          
          repos = [
              "swapnilpawar8767/Repo-info-report"
          ]
          
          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }
          
          report_date = datetime.date.today()
          separator = "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"
          IST = pytz.timezone('Asia/Kolkata')
          
          # Calculate date 7 days ago
          seven_days_ago = datetime.datetime.now(IST) - datetime.timedelta(days=7)
          
          message_parts = []
          message_parts.append(f"ðŸ“Š **Weekly GitHub Repo Report - {report_date}**\n\n")
          message_parts.append(f"Showing issues updated in the last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n\n")
          
          for repo in repos:
              # Add repo name heading
              repo_header = f"\n{separator}\n{' ' * 15}**{repo.upper()}**\n{separator}\n"
              message_parts.append(repo_header)
          
              response = requests.get(
                  f"https://api.github.com/repos/{repo}/issues?state=all&per_page=100&sort=updated",
                  headers=headers,
              )
              response.raise_for_status()
              issues = response.json()
          
              has_recent_issues = False
          
              for issue in issues:
                  if isinstance(issue, dict):  # Ensure it's a dictionary
                      if "pull_request" in issue:
                          continue
          
                      updated_at_raw = issue.get("updated_at", "")
                      try:
                          dt_utc = datetime.datetime.strptime(updated_at_raw, "%Y-%m-%dT%H:%M:%SZ")
                          dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
                          dt_ist = dt_utc.astimezone(IST)
                      except Exception as e:
                          print(f"Error parsing date for issue: {e}")
                          continue
          
                      # Skip issues not updated in the last 7 days
                      if dt_ist < seven_days_ago:
                          continue
          
                      has_recent_issues = True
                      title = issue.get("title", "No title")
                      issue_url = issue.get("html_url", "#")
                      status = "ðŸ†• Open" if issue.get("state", "").lower() == "open" else "Closed"
                      updated_at = dt_ist.strftime("%Y-%m-%d %H:%M:%S")
          
                      due_date = "-"
                      milestone = issue.get("milestone", {})
                      if isinstance(milestone, dict) and milestone.get("due_on"):
                          due_date = milestone["due_on"][:10]
          
                      last_comment = "No comments"
                      if issue.get("comments", 0) > 0:
                          try:
                              comments_response = requests.get(issue.get("comments_url", ""), headers=headers)
                              comments_response.raise_for_status()
                              comments = comments_response.json()
                              if comments and isinstance(comments, list):
                                  last_comment = comments[-1].get("body", "No comment body")
                                  if len(last_comment) > 50:
                                      last_comment = last_comment[:47] + "..."
                          except Exception as e:
                              print(f"Error getting comments: {e}")
          
                      message_parts.append(
                          f"ðŸ“Œ **[{title}]({issue_url})**  \n"
                          f"**Last Comment** :: {last_comment}  \n"
                          f"**Due Date**     :: {due_date}  \n"
                          f"**Status**       :: {status}  \n"
                          f"**Last Updated** :: {updated_at}  \n"
                          f"{separator}\n"
                      )
          
              if not has_recent_issues:
                  message_parts.append(f"No issues updated in the last 7 days\n{separator}\n")
          
          final_message = "".join(message_parts)
          
          payload = {
              "text": final_message,
              "markdown": True
          }
          
          resp = requests.post(os.environ["REPORT_WEBHOOK_URL"], json=payload)
          resp.raise_for_status()
          print("âœ… Report sent successfully!")
          EOF
