name: Weekly GitHub Repo Report

on:
  schedule:
    - cron: "30 2 * * 1"  # Every Monday at 08:00 IST (2:30 AM UTC)
  workflow_dispatch:

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests pytz

      - name: Generate and send report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPORT_WEBHOOK_URL: ${{ vars.REPORT_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import requests
          import os
          import datetime
          import pytz

          # Get the webhook from variable
          webhook_url = os.environ.get("REPORT_WEBHOOK_URL")
          if not webhook_url:
              print("❌ REPORT_WEBHOOK_URL variable is empty. Exiting.")
              exit(1)

          repos = [
              "wapnilpawar8767/Repo-info-report"
              
          ]

          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }

          report_date = datetime.date.today()
          separator = "──────────────────────────────\n"
          IST = pytz.timezone('Asia/Kolkata')

          # Calculate date 7 days ago
          seven_days_ago = datetime.datetime.now(IST) - datetime.timedelta(days=7)

          message_parts = []
          message_parts.append(f"📊 Weekly GitHub Repo Report - {report_date}\n\n")
          message_parts.append(f"Showing issues updated in the last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n\n")

          for repo in repos:
              # Repo header
              repo_header = f"\n{separator}\n\n{' ' * 15}**{repo.upper()}**\n\n{separator}\n"
              message_parts.append(repo_header)

              page = 1
              per_page = 100
              has_recent_issues = False

              while True:
                  response = requests.get(
                      f"https://api.github.com/repos/{repo}/issues?state=all&per_page={per_page}&page={page}&sort=updated",
                      headers=headers,
                  )
                  if response.status_code != 200:
                      message_parts.append(f"Failed to fetch issues for {repo}: {response.status_code}\n")
                      break

                  issues = response.json()
                  if not issues:
                      break

                  for issue in issues:
                      if "pull_request" in issue:
                          continue

                      updated_at_raw = issue.get("updated_at", "")
                      try:
                          dt_utc = datetime.datetime.strptime(updated_at_raw, "%Y-%m-%dT%H:%M:%SZ")
                          dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
                          dt_ist = dt_utc.astimezone(IST)
                      except Exception:
                          continue

                      # Skip issues not updated in last 7 days
                      if dt_ist < seven_days_ago:
                          continue

                      has_recent_issues = True
                      title = issue.get("title", "")
                      issue_url = issue.get("html_url", "")
                      status = "🆕 Open" if issue.get("state", "").lower() == "open" else "Closed"
                      updated_at = dt_ist.strftime("%Y-%m-%d %H:%M:%S")

                      # Safe milestone access
                      due_date = "-"
                      milestone = issue.get("milestone")
                      if milestone and isinstance(milestone, dict):
                          due_date = milestone.get("due_on", "-")[:10] if milestone.get("due_on") else "-"

                      # Last comment safe access
                      last_comment = "No comments"
                      if issue.get("comments", 0) > 0:
                          comments_response = requests.get(issue["comments_url"], headers=headers)
                          comments = comments_response.json()
                          if isinstance(comments, list) and comments:
                              last_comment = comments[-1].get("body", "").replace("\n", " ")
                              if len(last_comment) > 50:
                                  last_comment = last_comment[:47] + "..."

                      message_parts.append(f"📌 **[{title}]({issue_url})**  \n"
                                           f"**Last Comment** :: {last_comment}  \n"
                                           f"**Due Date**     :: {due_date}  \n"
                                           f"**Status**       :: {status}  \n"
                                           f"**Last Updated** :: {updated_at}  \n"
                                           f"{separator}\n")

                  if len(issues) < per_page:
                      break
                  page += 1

              if not has_recent_issues:
                  message_parts.append(f"No issues updated in the last 7 days\n{separator}\n")

          final_message = "".join(message_parts)

          payload = {
              "text": final_message,
              "markdown": True
          }

          resp = requests.post(webhook_url, json=payload)
          resp.raise_for_status()
          print("✅ Report sent to Teams successfully!")
          EOF
