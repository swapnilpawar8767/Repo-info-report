name: Weekly GitHub Repo Report

on:
  schedule:
    - cron: "30 2 * * 1"  # Every Monday at 08:00 IST (2:30 AM UTC)
  workflow_dispatch:

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests pytz weasyprint markdown PyGithub

      - name: Generate and send report
        env:
          GHPT_PAT: ${{ secrets.DILESH_PAT_TOKEN }}
          WEEKLY_ISSUE_REPORT: ${{ vars.WEEKLY_ISSUE_REPORT }}
        run: |
          python << 'EOF'
          import requests
          import os
          import datetime
          import pytz
          import json
          import time
          import markdown
          from weasyprint import HTML, CSS
          from github import Github

          repos = [
              "swapnilpawar8767/Repo-info-report"
          ]

          # Use only one token from secrets.GHPT_PAT
          token = os.environ.get("GHPT_PAT")
          if not token:
              print("‚ùå No token found in GHPT_PAT. Exiting.")
              exit(1)

          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3+json"
          }

          IST = pytz.timezone('Asia/Kolkata')
          report_date = datetime.date.today()
          separator = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

          seven_days_ago = datetime.datetime.now(IST) - datetime.timedelta(days=7)
          seven_days_ago_iso = seven_days_ago.isoformat()

          message_parts = []
          message_parts.append(f"üìä Weekly GitHub Repo Report - {report_date}\n\n")
          message_parts.append(f"Showing issues updated in the last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n\n")

          for repo in repos:
              repo_header = f"\n{separator}\n\n{' ' * 15}**{repo.upper()}**\n\n{separator}\n"
              message_parts.append(repo_header)

              url = f"https://api.github.com/repos/{repo}/issues?state=all&since={seven_days_ago_iso}&per_page=100&sort=updated"
              try:
                  response = requests.get(url, headers=headers)
                  if response.status_code == 401:
                      message_parts.append(f"‚ö†Ô∏è Unauthorized to fetch issues for {repo}. Check token permissions.\n{separator}\n")
                      continue
                  response.raise_for_status()
                  issues = response.json()
              except Exception as e:
                  message_parts.append(f"Failed to fetch issues for {repo}: {e}\n{separator}\n")
                  continue

              has_recent_issues = False
              open_count = 0
              closed_count = 0

              for issue in issues:
                  if "pull_request" in issue:
                      continue

                  updated_at_raw = issue.get("updated_at")
                  if not updated_at_raw:
                      continue
                  try:
                      dt_utc = datetime.datetime.strptime(updated_at_raw, "%Y-%m-%dT%H:%M:%SZ")
                      dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
                      dt_ist = dt_utc.astimezone(IST)
                  except:
                      continue

                  if dt_ist < seven_days_ago:
                      continue

                  has_recent_issues = True
                  title = issue.get("title", "")
                  issue_number = issue.get("number", "")
                  issue_url = issue.get("html_url", "")
                  status = "üÜï Open" if issue.get("state", "").lower() == "open" else "Closed"

                  if status == "üÜï Open":
                      open_count += 1
                  else:
                      closed_count += 1

                  updated_at = dt_ist.strftime("%Y-%m-%d %H:%M:%S")

                  milestone = issue.get("milestone")
                  milestone_name = "-"
                  due_date = "-"
                  if isinstance(milestone, dict):
                      milestone_name = milestone.get("title", "-")
                      due_date = milestone.get("due_on", "-")[:10] if milestone.get("due_on") else "-"

                  last_comment = "No comments"
                  if issue.get("comments", 0) > 0:
                      try:
                          comments_response = requests.get(issue["comments_url"], headers=headers)
                          comments_response.raise_for_status()
                          comments = comments_response.json()
                          if comments:
                              last_comment = comments[-1].get("body", "").replace("\n", " ")
                              if len(last_comment) > 50:
                                  last_comment = last_comment[:47] + "..."
                      except:
                          last_comment = "Failed to fetch comments"

                  message_parts.append(
                      f"üìå **#{issue_number}** [{title}]({issue_url})  \n"
                      f"**Status**: {status} | **Updated**: {updated_at}  \n"
                      f"**Milestone**: {milestone_name} | **Due**: {due_date}  \n"
                      f"**Last Comment**: {last_comment}  \n"
                      f"{separator}  \n"
                  )

              if not has_recent_issues:
                  message_parts.append(f"No issues updated in the last 7 days\n{separator}\n")

              # Per-repo summary box
              message_parts.append(
                  f"üìä **Summary (last 7 days)**  \n"
                  f"Open Issues   :: {open_count}  \n"
                  f"Closed Issues :: {closed_count}  \n"
                  f"{separator}  \n"
              )

          final_message = "".join(message_parts)

          # Save report to file for debugging
          with open('weekly_report.md', 'w', encoding='utf-8') as f:
              f.write(final_message)

          print("üìã Generated report:")
          print(f"üìè Message length: {len(final_message)} characters")

          # Generate PDF from markdown
          print("üîÑ Converting to PDF...")
          
          # Convert markdown to HTML
          html_content = markdown.markdown(final_message, extensions=['tables', 'fenced_code'])
          
          # Create styled HTML
          styled_html = f"""
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <style>
                  body {{
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                      margin: 40px;
                      line-height: 1.6;
                      color: #333;
                  }}
                  h1 {{
                      color: #0078d4;
                      border-bottom: 2px solid #0078d4;
                      padding-bottom: 10px;
                  }}
                  h2 {{
                      color: #106ebe;
                      margin-top: 30px;
                  }}
                  .separator {{
                      border-top: 1px solid #ddd;
                      margin: 20px 0;
                  }}
                  .issue {{
                      background: #f8f9fa;
                      padding: 15px;
                      margin: 10px 0;
                      border-left: 4px solid #0078d4;
                      border-radius: 4px;
                  }}
                  .status-open {{
                      color: #107c10;
                      font-weight: bold;
                  }}
                  .status-closed {{
                      color: #d13438;
                      font-weight: bold;
                  }}
                  .summary-box {{
                      background: #e3f2fd;
                      padding: 15px;
                      border-radius: 8px;
                      margin: 20px 0;
                  }}
                  a {{
                      color: #0078d4;
                      text-decoration: none;
                  }}
                  a:hover {{
                      text-decoration: underline;
                  }}
              </style>
          </head>
          <body>
              {html_content}
          </body>
          </html>
          """
          
          # Generate PDF
          try:
              html = HTML(string=styled_html)
              html.write_pdf('weekly_report.pdf')
              print("‚úÖ PDF generated successfully!")
              
              # Verify PDF file exists and has content
              import os
              if os.path.exists('weekly_report.pdf'):
                  file_size = os.path.getsize('weekly_report.pdf')
                  print(f"‚úÖ PDF file verified: {file_size} bytes")
                  if file_size == 0:
                      raise Exception("PDF file is empty")
              else:
                  raise Exception("PDF file was not created")
                  
          except Exception as e:
              print(f"‚ùå Failed to generate PDF: {e}")
              # Fallback: send as markdown file
              print("üìÑ Falling back to markdown file...")
              download_url = "PDF generation failed - check workflow logs"

          webhook_url = os.environ.get("WEEKLY_ISSUE_REPORT")
          if not webhook_url:
              print("‚ùå WEEKLY_ISSUE_REPORT is empty. Exiting.")
              exit(1)

          print(f"üîó Webhook URL: {webhook_url[:50]}...")

          # Create GitHub release with PDF for direct download
          print("üì§ Creating GitHub release with PDF...")
          try:
              g = Github(token)
              repo = g.get_repo("ZySec-AI/cyberpod-readiness")
              
              # Create release tag
              release_tag = f"weekly-report-{report_date}"
              release_name = f"Weekly Report - {report_date}"
              release_body = f"Weekly GitHub Repo Report for {report_date}\n\nPeriod: Last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\nRepositories: {len(repos)} repositories monitored"
              
              # Check if release already exists
              try:
                  existing_release = repo.get_release(release_tag)
                  print(f"‚ö†Ô∏è Release {release_tag} already exists, updating...")
                  # Delete existing release
                  existing_release.delete_release()
                  # Delete the tag
                  repo.get_git_ref(f"tags/{release_tag}").delete()
              except:
                  print(f"‚úÖ Creating new release: {release_tag}")
              
              # Create release
              release = repo.create_git_release(
                  tag=release_tag,
                  name=release_name,
                  message=release_body,
                  draft=False,
                  prerelease=False
              )
              
              # Upload PDF to release
              with open('weekly_report.pdf', 'rb') as pdf_file:
                  asset = release.upload_asset(
                      path='weekly_report.pdf',
                      asset=pdf_file,
                      label='Weekly Report PDF',
                      content_type='application/pdf'
                  )
              
              # Get download URL
              download_url = f"https://github.com/ZySec-AI/cyberpod-readiness/releases/download/{release_tag}/weekly_report.pdf"
              print(f"‚úÖ PDF uploaded to GitHub release: {download_url}")
              print(f"‚úÖ Asset ID: {asset.id}")
              
              # Test the download URL
              print("üß™ Testing download URL accessibility...")
              try:
                  test_response = requests.head(download_url, timeout=10)
                  if test_response.status_code == 200:
                      print("‚úÖ Download URL is accessible!")
                  else:
                      print(f"‚ö†Ô∏è Download URL returned status: {test_response.status_code}")
              except Exception as e:
                  print(f"‚ö†Ô∏è Could not test download URL: {e}")
              
          except Exception as e:
              print(f"‚ùå Failed to create GitHub release: {e}")
              download_url = "PDF available in workflow artifacts"
              print("üìÑ Falling back to workflow artifacts...")

          # Send Teams message with download link
          if 'webhook.office.com' in webhook_url:
              payload = {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "0076D7",
                  "summary": f"Weekly GitHub Repo Report - {report_date}",
                  "sections": [{
                      "activityTitle": "üìä Weekly GitHub Repo Report",
                      "activitySubtitle": f"Generated on {report_date}",
                      "text": f"üìã **Weekly GitHub Repo Report** has been generated!\n\n"
                              f"üìÖ **Period**: Last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n"
                              f"üìä **Repositories**: {len(repos)} repositories monitored\n"
                              f"üìè **Report Size**: {len(final_message)} characters\n\n"
                              f"üì• **Download PDF**: {download_url}\n\n"
                              f"üîç **Summary**: Click the link above to download the complete report."
                  }]
              }
          else:
              payload = {
                  "text": f"üìä Weekly GitHub Repo Report - {report_date}\n\n"
                          f"üìÖ Period: Last 7 days (since {seven_days_ago.strftime('%Y-%m-%d')})\n"
                          f"üìä Repositories: {len(repos)} repositories monitored\n"
                          f"üìè Report Size: {len(final_message)} characters\n\n"
                          f"üì• Download PDF: {download_url}"
              }

          print("üì§ Sending Teams notification...")
          resp = requests.post(webhook_url, json=payload, headers={"Content-Type": "application/json"})
          print(f"üì° Response status: {resp.status_code}")
          
          if resp.status_code == 200:
              print("‚úÖ Teams notification sent successfully!")
          else:
              print(f"‚ùå Failed to send Teams notification: {resp.status_code} - {resp.text}")
              exit(1)
          EOF

      - name: Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weekly-report-${{ github.run_id }}
          path: |
            weekly_report.md
            weekly_report.pdf
          retention-days: 7
