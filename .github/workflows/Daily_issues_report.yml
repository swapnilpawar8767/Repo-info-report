name: Weekly GitHub Repo Report

on:
  schedule:
    - cron: "30 2 * * 1"  # Every Monday at 08:00 IST (2:30 AM UTC)
  workflow_dispatch:

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests pytz

      - name: Generate and send report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPORT_WEBHOOK_URL: ${{ secrets.REPORT_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import requests
          import os
          import datetime
          import pytz

          repos = [
              "ZySec-AI/cpod-backend",
              "ZySec-AI/cyberpod",
              "ZySec-AI/cpod-ui"
          ]

          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }

          IST = pytz.timezone('Asia/Kolkata')
          today_ist = datetime.datetime.now(IST)
          seven_days_ago = today_ist - datetime.timedelta(days=7)

          report_date = today_ist.date()
          separator = "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"

          message_parts = []
          message_parts.append(f"ðŸ“Š Weekly GitHub Repo Report - Week Ending {report_date}\n\n")

          for repo in repos:
              repo_header = f"\n{separator}\n\n{' ' * 15}**{repo.upper()}**\n\n{separator}\n"
              message_parts.append(repo_header)

              # GitHub Search API for issues updated in last 7 days
              query = f"repo:{repo} updated:>={seven_days_ago.strftime('%Y-%m-%d')}"

              search_url = "https://api.github.com/search/issues"
              params = {
                  "q": query,
                  "sort": "updated",
                  "order": "desc",
                  "per_page": 10
              }

              response = requests.get(search_url, headers=headers, params=params)
              response.raise_for_status()
              items = response.json().get("items", [])

              for issue in items:
                  # Skip pull requests
                  if "pull_request" in issue:
                      continue

                  title = issue.get("title", "")
                  issue_url = issue.get("html_url", "")
                  status = "ðŸ†• Open" if issue.get("state", "").lower() == "open" else "Closed"

                  updated_at_raw = issue.get("updated_at", "")
                  try:
                      dt_utc = datetime.datetime.strptime(updated_at_raw, "%Y-%m-%dT%H:%M:%SZ")
                      dt_utc = dt_utc.replace(tzinfo=datetime.timezone.utc)
                      dt_ist = dt_utc.astimezone(IST)
                      updated_at = dt_ist.strftime("%Y-%m-%d %H:%M:%S")
                  except Exception:
                      updated_at = updated_at_raw

                  due_date = "-"
                  milestone = issue.get("milestone")
                  if milestone and milestone.get("due_on"):
                      due_date = milestone["due_on"][:10]

                  last_comment = "No comments"
                  if issue.get("comments", 0) > 0:
                      comments_response = requests.get(issue["comments_url"], headers=headers)
                      comments_response.raise_for_status()
                      comments = comments_response.json()
                      if comments:
                          last_comment = comments[-1].get("body", "").replace("\n", " ")
                          if len(last_comment) > 50:
                              last_comment = last_comment[:47] + "..."

                  message_parts.append(
                      f"ðŸ“Œ **[{title}]({issue_url})**  \n"
                      f"**Last Comment** :: {last_comment}  \n"
                      f"**Due Date**     :: {due_date}  \n"
                      f"**Status**       :: {status}  \n"
                      f"**Last Updated** :: {updated_at}  \n"
                      f"{separator}\n"
                  )

          final_message = "".join(message_parts)

          payload = {
              "text": final_message,
              "markdown": True
          }

          resp = requests.post(os.environ["REPORT_WEBHOOK_URL"], json=payload)
          resp.raise_for_status()
          print("âœ… Report sent to Teams successfully!")
          EOF
