name: Daily GitHub Repo Report

on:
  schedule:
    - cron: "0 9 * * *"  # Daily at 09:00 UTC (2:30 PM IST)
  workflow_dispatch:

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Generate and send report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import requests
          import os
          import datetime

          repos = [
              "swapnilpawar8767/Repo-info-report"
          ]

          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }

          report_date = datetime.date.today()
          separator = "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"

          message_parts = []
          message_parts.append(f"ðŸ“Š Daily GitHub Repo Report - {report_date}\n")

          for repo in repos:
              response = requests.get(
                  f"https://api.github.com/repos/{repo}/issues?state=all&per_page=5&sort=updated",
                  headers=headers,
              )
              issues = response.json()

              for issue in issues:
                  if "pull_request" in issue:
                      continue

                  title = issue.get("title", "")
                  issue_url = issue.get("html_url", "")
                  status = "ðŸ†• Open" if issue.get("state", "").lower() == "open" else "Closed"
                  updated_at = issue.get("updated_at", "")[:10]
                  
                  due_date = "-"
                  if issue.get("milestone") and issue["milestone"].get("due_on"):
                      due_date = issue["milestone"]["due_on"][:10]

                  last_comment = "No comments"
                  if issue.get("comments", 0) > 0:
                      comments_response = requests.get(issue["comments_url"], headers=headers)
                      comments = comments_response.json()
                      if comments:
                          last_comment = comments[-1].get("body", "").replace("\n", " ")
                          if len(last_comment) > 50:
                              last_comment = last_comment[:47] + "..."

                  # Add each issue section with proper newline after separator
                  message_parts.append(f"""
                  {separator}
                  ðŸ“Œ [{title}]({issue_url}) ({repo})  
                  Last Comment :: {last_comment}  
                  Due Date     :: {due_date}  
                  Status       :: {status}  
                  Last Updated :: {updated_at}  
                  """)

          message_parts.append(separator)
          final_message = "".join(message_parts)

          # Format as code block to preserve spacing
          payload = {
              "text": f"```{final_message}```",
              "markdown": True
          }

          resp = requests.post(os.environ["TEAMS_WEBHOOK_URL"], json=payload)
          resp.raise_for_status()
          print("âœ… Report sent to Teams successfully!")
          EOF
