name: Daily Repo Report to Teams

on:
  schedule:
    - cron: "0 9 * * *" # Daily at 09:00 UTC (2:30 PM IST)
  workflow_dispatch: # Manual trigger

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Generate and send report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import requests, os, datetime

          # ---------- CONFIG ----------
          repos = [
              "swapnilpawar8767/Repo-info-report"  # Add more in format owner/repo
          ]
          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }
          # ----------------------------

          issues_data = []

          for repo in repos:
              issues = requests.get(
                  f"https://api.github.com/repos/{repo}/issues?state=all&per_page=5&sort=updated",
                  headers=headers
              ).json()

              for issue in issues:
                  if "pull_request" in issue:
                      continue  # Skip PRs

                  task_name = issue.get("title", "")
                  status_raw = issue.get("state", "").lower()
                  status = "ðŸ†• Open" if status_raw == "open" else "Closed"
                  updated_at = issue.get("updated_at", "")[:10]

                  due_date = "-"
                  if issue.get("milestone") and issue["milestone"].get("due_on"):
                      due_date = issue["milestone"]["due_on"][:10]

                  last_comment = "No comments"
                  if issue.get("comments", 0) > 0:
                      comments = requests.get(issue["comments_url"], headers=headers).json()
                      if comments:
                          last_comment = comments[-1].get("body", "").replace("\n", " ")
                          if len(last_comment) > 50:
                              last_comment = last_comment[:47] + "..."

                  issues_data.append({
                      "repo": repo,
                      "task": task_name,
                      "comment": last_comment,
                      "due": due_date,
                      "status": status,
                      "updated": updated_at
                  })

          # Build plain text report
          report_date = datetime.date.today()
          final_report = f"ðŸ“Š Daily GitHub Repo Report - {report_date}\n\n"

          for item in issues_data:
              final_report += "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"
              final_report += f"ðŸ“Œ {item['task']} ({item['repo']})\n"
              final_report += f"Last Comment :: {item['comment']}\n"
              final_report += f"Due Date     :: {item['due']}\n"
              final_report += f"Status       :: {item['status']}\n"
              final_report += f"Last Updated :: {item['updated']}\n"

          final_report += "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"

          # Send to Teams as plain text
          payload = {"text": final_report}
          resp = requests.post(os.environ["TEAMS_WEBHOOK_URL"], json=payload)
          resp.raise_for_status()
          print("âœ… Report sent to Teams successfully!")
          EOF
