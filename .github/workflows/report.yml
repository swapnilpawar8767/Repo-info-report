name: GitHub Repo Report

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *" # Runs every day at 9 AM UTC

jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub Repo Report
        env:
          REPO: my-team-repo # Change to your repo name
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ðŸ“Š **Daily GitHub Repo Report** ðŸ“Š" > report.md
          echo "" >> report.md
          echo "| Type | Title | Milestone | Due Date | Status | Last Comment | Last Updated |" >> report.md
          echo "|------|-------|-----------|----------|--------|--------------|--------------|" >> report.md

          gh api graphql -f query='
          {
            repository(owner: "my-org", name: "'$REPO'") {
              issues(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {
                nodes {
                  title
                  state
                  updatedAt
                  comments(last: 1) { nodes { bodyText } }
                  milestone { title dueOn }
                  url
                }
              }
              pullRequests(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {
                nodes {
                  title
                  state
                  updatedAt
                  comments(last: 1) { nodes { bodyText } }
                  milestone { title dueOn }
                  url
                }
              }
            }
          }' --jq '
          .data.repository.issues[]? as $i |
          "| Issue | \($i.title) | \($i.milestone.title // "-") | \($i.milestone.dueOn // "-") | \($i.state | ascii_downcase) | \($i.comments.nodes[0].bodyText // "-") | \($i.updatedAt) |"
          ' >> report.md

          gh api graphql -f query='
          {
            repository(owner: "my-org", name: "'$REPO'") {
              pullRequests(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {
                nodes {
                  title
                  state
                  updatedAt
                  comments(last: 1) { nodes { bodyText } }
                  milestone { title dueOn }
                  url
                }
              }
            }
          }' --jq '
          .data.repository.pullRequests[]? as $p |
          "| PR | \($p.title) | \($p.milestone.title // "-") | \($p.milestone.dueOn // "-") | \($p.state | ascii_downcase) | \($p.comments.nodes[0].bodyText // "-") | \($p.updatedAt) |"
          ' >> report.md

      - name: Send to Microsoft Teams
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK }}
          raw: "$(cat report.md)"
