name: Daily GitHub Issue Report

on:
  schedule:
    - cron: "0 9 * * *" # Runs daily at 9 AM UTC
  workflow_dispatch:

jobs:
  daily-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Issues from GitHub API
        id: get_issues
        run: |
          repos=("swapnilpawar8767/Repo-info-report") # Add more repos if needed
          report_date=$(date +"%Y-%m-%d")
          final_report="ðŸ“Š Daily GitHub Repo Report - ${report_date}\n"

          for repo in "${repos[@]}"; do
            issues=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${repo}/issues?state=all&since=$(date -d '1 day ago' --utc +%Y-%m-%dT%H:%M:%SZ)")

            for row in $(echo "$issues" | jq -r '.[] | @base64'); do
              _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
              }

              title=$(_jq '.title')
              number=$(_jq '.number')
              state=$(_jq '.state')
              updated=$(_jq '.updated_at' | cut -d'T' -f1)
              due_date=$(_jq '.milestone.due_on')
              comments_url=$(_jq '.comments_url')

              # Get last comment
              comments=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$comments_url")
              last_comment=$(echo "$comments" | jq -r '.[-1].body // "No comments"')

              # Status formatting
              if [[ "$state" == "open" ]]; then
                status="ðŸ†• Open"
              else
                status="Closed"
              fi

              # Handle null due date
              if [[ "$due_date" == "null" ]]; then
                due_date="-"
              else
                due_date=$(echo "$due_date" | cut -d'T' -f1)
              fi

              # Append formatted issue details
              final_report+="\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"
              final_report+="ðŸ“Œ ${title} (${repo})\n"
              final_report+="Last Comment :: ${last_comment}\n"
              final_report+="Due Date     :: ${due_date}\n"
              final_report+="Status       :: ${status}\n"
              final_report+="Last Updated :: ${updated}\n"
            done
          done

          echo "final_report<<EOF" >> $GITHUB_ENV
          echo -e "$final_report" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Report to Microsoft Teams
        run: |
          payload=$(jq -n --arg text "${final_report}" '{text: $text}')
          curl -H 'Content-Type: application/json' \
               -d "$payload" \
               "${{ secrets.MS_TEAMS_WEBHOOK_URL }}"
