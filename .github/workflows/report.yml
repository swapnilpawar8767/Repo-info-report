name: Daily GitHub Repo Report Simple Links

on:
  schedule:
    - cron: "0 9 * * *"  # Runs daily at 09:00 UTC (2:30 PM IST)
  workflow_dispatch:      # Allows manual trigger

jobs:
  send-report:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Generate and send simple clickable report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import requests
          import os
          import datetime

          repos = [
              "swapnilpawar8767/Repo-info-report"  # Add more repos here as "owner/repo"
          ]

          headers = {
              "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
              "Accept": "application/vnd.github.v3+json"
          }

          report_date = datetime.date.today()
          report_lines = []
          report_lines.append(f"ðŸ“Š Open Issues as of {report_date}")
          report_lines.append("")

          for repo in repos:
              response = requests.get(
                  f"https://api.github.com/repos/{repo}/issues?state=open&per_page=10&sort=updated",
                  headers=headers,
              )
              issues = response.json()

              for issue in issues:
                  if "pull_request" in issue:
                      continue  # skip PRs

                  title = issue.get("title", "")
                  issue_number = issue.get("number")
                  issue_url = f"https://github.com/{repo}/issues/{issue_number}"

                  # Markdown clickable link for Teams
                  title_link = f"[{title}]({issue_url})"

                  milestone = issue.get("milestone")
                  milestone_title = milestone["title"] if milestone else "None"
                  state = issue.get("state", "").upper()
                  updated = issue.get("updated_at", "")

                  report_lines.append(f"{title_link} (Milestone: {milestone_title}, State: {state}, Updated: {updated})")

          report_lines.append("")
          report_lines.append("ðŸ“‹ Recent Pull Requests")

          final_report = "\n".join(report_lines)

          payload = {
              "text": final_report
          }

          resp = requests.post(os.environ["TEAMS_WEBHOOK_URL"], json=payload)
          resp.raise_for_status()
          print("âœ… Simple clickable report sent to Teams!")
          EOF
